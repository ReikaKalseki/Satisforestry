// Date: 28/11/2021 7:12:26 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package Reika.Satisforestry.Render;

import java.util.ArrayList;

import org.lwjgl.opengl.GL11;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.util.MathHelper;

public class ModelSpitter extends ModelBase
{
	//fields
	ModelRenderer faceL1;
	ModelRenderer crestR2;
	ModelRenderer Body;
	ModelRenderer Mane;
	ModelRenderer Leg1b;
	ModelRenderer Leg2b;
	ModelRenderer Leg3;
	ModelRenderer Leg4;
	ModelRenderer faceR2;
	ModelRenderer headBack;
	ModelRenderer neck;
	ModelRenderer crestC;
	ModelRenderer tlf;
	ModelRenderer crestL1;
	ModelRenderer crestR1;
	ModelRenderer headCenter;
	ModelRenderer crestL2;
	ModelRenderer tl1;
	ModelRenderer tl2;
	ModelRenderer tr1;
	ModelRenderer tr2;
	ModelRenderer Forehead;
	ModelRenderer faceR1;
	ModelRenderer Nose;
	ModelRenderer faceL2;
	ModelRenderer NoseUpper;
	ModelRenderer NoseBack;
	ModelRenderer chin2;
	ModelRenderer chin;
	ModelRenderer Leg2;
	ModelRenderer Leg1;
	ModelRenderer trf;

	private final ArrayList<ModelPartEntry> headParts = new ArrayList();
	private final ArrayList<ModelPartEntry> legParts = new ArrayList();

	private double headRotation;

	public ModelSpitter()
	{
		textureWidth = 64;
		textureHeight = 64;

		faceL1 = new ModelRenderer(this, 52, 6);
		faceL1.addBox(-2.8F, -2.5F, -2.9F, 2, 4, 1);
		faceL1.setRotationPoint(0F, 13.5F, -7F);
		faceL1.setTextureSize(64, 64);
		faceL1.mirror = true;
		this.setRotation(faceL1, 0F, -1.047198F, 0F);
		crestR2 = new ModelRenderer(this, 0, 39);
		crestR2.addBox(-8F, -4F, 1F, 6, 1, 3);
		crestR2.setRotationPoint(0F, 13.5F, -7F);
		crestR2.setTextureSize(64, 64);
		crestR2.mirror = true;
		this.setRotation(crestR2, 0F, 0F, 0F);
		Body = new ModelRenderer(this, 18, 14);
		Body.addBox(-3.5F, -2F, -2.5F, 7, 6, 6);
		Body.setRotationPoint(0F, 14F, 2F);
		Body.setTextureSize(64, 64);
		Body.mirror = true;
		this.setRotation(Body, 1.570796F, 0F, 0F);
		Mane = new ModelRenderer(this, 21, 0);
		Mane.addBox(-4F, -3F, -3F, 8, 6, 7);
		Mane.setRotationPoint(0F, 14F, -3F);
		Mane.setTextureSize(64, 64);
		Mane.mirror = true;
		this.setRotation(Mane, 1.570796F, 0F, 0F);
		Leg1b = new ModelRenderer(this, 0, 29);
		Leg1b.addBox(-1.5F, -4.8F, -1.5F, 3, 6, 3);
		Leg1b.setRotationPoint(-2.5F, 16F, 7F);
		Leg1b.setTextureSize(64, 64);
		Leg1b.mirror = true;
		this.setRotation(Leg1b, 0.5235988F, 0F, 0F);
		Leg2b = new ModelRenderer(this, 13, 29);
		Leg2b.addBox(-1.5F, -4.8F, -1.5F, 3, 6, 3);
		Leg2b.setRotationPoint(2.5F, 16F, 7F);
		Leg2b.setTextureSize(64, 64);
		Leg2b.mirror = true;
		this.setRotation(Leg2b, 0.5235988F, 0F, 0F);
		Leg3 = new ModelRenderer(this, 9, 18);
		Leg3.addBox(-1F, 0F, -1F, 2, 8, 2);
		Leg3.setRotationPoint(-2.5F, 16F, -4F);
		Leg3.setTextureSize(64, 64);
		Leg3.mirror = true;
		this.setRotation(Leg3, 0F, 0F, 0F);
		Leg4 = new ModelRenderer(this, 0, 18);
		Leg4.addBox(-1F, 0F, -1F, 2, 8, 2);
		Leg4.setRotationPoint(2.5F, 16F, -4F);
		Leg4.setTextureSize(64, 64);
		Leg4.mirror = true;
		this.setRotation(Leg4, 0F, 0F, 0F);
		faceR2 = new ModelRenderer(this, 45, 14);
		faceR2.addBox(-3.5F, -3F, -3F, 3, 4, 1);
		faceR2.setRotationPoint(0F, 13.5F, -7F);
		faceR2.setTextureSize(64, 64);
		faceR2.mirror = true;
		this.setRotation(faceR2, 0F, 0.5235988F, 0F);
		headBack = new ModelRenderer(this, 36, 37);
		headBack.addBox(-6F, -3F, 1.5F, 12, 3, 2);
		headBack.setRotationPoint(0F, 13.5F, -7F);
		headBack.setTextureSize(64, 64);
		headBack.mirror = true;
		this.setRotation(headBack, 0F, 0F, 0F);
		neck = new ModelRenderer(this, 0, 0);
		neck.addBox(-3F, -3F, -1F, 6, 5, 2);
		neck.setRotationPoint(0F, 13.5F, -7F);
		neck.setTextureSize(64, 64);
		neck.mirror = true;
		this.setRotation(neck, 0F, 0F, 0F);
		crestC = new ModelRenderer(this, 19, 40);
		crestC.addBox(-2F, -4F, -1.5F, 4, 1, 4);
		crestC.setRotationPoint(0F, 13.5F, -7F);
		crestC.setTextureSize(64, 64);
		crestC.mirror = true;
		this.setRotation(crestC, 0.0523599F, 0F, 0F);
		tlf = new ModelRenderer(this, 54, 12);
		tlf.addBox(6F, -4F, 0F, 1, 6, 1);
		tlf.setRotationPoint(0F, 13.5F, -7F);
		tlf.setTextureSize(64, 64);
		tlf.mirror = true;
		this.setRotation(tlf, 0F, 0F, 0F);
		crestL1 = new ModelRenderer(this, 51, 32);
		crestL1.addBox(2F, -3.9F, -0.7F, 4, 1, 2);
		crestL1.setRotationPoint(0F, 13.5F, -7F);
		crestL1.setTextureSize(64, 64);
		crestL1.mirror = true;
		this.setRotation(crestL1, 0.0872665F, 0F, 0F);
		crestR1 = new ModelRenderer(this, 51, 28);
		crestR1.addBox(-6F, -3.9F, -0.7F, 4, 1, 2);
		crestR1.setRotationPoint(0F, 13.5F, -7F);
		crestR1.setTextureSize(64, 64);
		crestR1.mirror = true;
		this.setRotation(crestR1, 0.0872665F, 0F, 0F);
		headCenter = new ModelRenderer(this, 26, 29);
		headCenter.addBox(-5F, -3F, -0.5F, 10, 4, 2);
		headCenter.setRotationPoint(0F, 13.5F, -7F);
		headCenter.setTextureSize(64, 64);
		headCenter.mirror = true;
		this.setRotation(headCenter, 0F, 0F, 0F);
		crestL2 = new ModelRenderer(this, 0, 9);
		crestL2.addBox(2F, -4F, 1F, 6, 1, 3);
		crestL2.setRotationPoint(0F, 13.5F, -7F);
		crestL2.setTextureSize(64, 64);
		crestL2.mirror = true;
		this.setRotation(crestL2, 0F, 0F, 0F);
		tl1 = new ModelRenderer(this, 59, 9);
		tl1.addBox(4.5F, -4F, 4F, 1, 6, 1);
		tl1.setRotationPoint(0F, 13.5F, -7F);
		tl1.setTextureSize(64, 64);
		tl1.mirror = true;
		this.setRotation(tl1, 0F, 0F, 0F);
		tl2 = new ModelRenderer(this, 59, 0);
		tl2.addBox(6.5F, -4F, 4F, 1, 7, 1);
		tl2.setRotationPoint(0F, 13.5F, -7F);
		tl2.setTextureSize(64, 64);
		tl2.mirror = true;
		this.setRotation(tl2, 0F, 0F, 0F);
		tr1 = new ModelRenderer(this, 59, 9);
		tr1.addBox(-5.5F, -4F, 4F, 1, 6, 1);
		tr1.setRotationPoint(0F, 13.5F, -7F);
		tr1.setTextureSize(64, 64);
		tr1.mirror = true;
		this.setRotation(tr1, 0F, 0F, 0F);
		tr2 = new ModelRenderer(this, 59, 0);
		tr2.addBox(-7.5F, -4F, 4F, 1, 7, 1);
		tr2.setRotationPoint(0F, 13.5F, -7F);
		tr2.setTextureSize(64, 64);
		tr2.mirror = true;
		this.setRotation(tr2, 0F, 0F, 0F);
		Forehead = new ModelRenderer(this, 0, 15);
		Forehead.addBox(-3F, -1.1F, -3.9F, 6, 1, 1);
		Forehead.setRotationPoint(0F, 13.5F, -7F);
		Forehead.setTextureSize(64, 64);
		Forehead.mirror = true;
		this.setRotation(Forehead, -1.047198F, 0F, 0F);
		faceR1 = new ModelRenderer(this, 52, 6);
		faceR1.addBox(0.8F, -2.5F, -2.9F, 2, 4, 1);
		faceR1.setRotationPoint(0F, 13.5F, -7F);
		faceR1.setTextureSize(64, 64);
		faceR1.mirror = true;
		this.setRotation(faceR1, 0F, 1.047198F, 0F);
		Nose = new ModelRenderer(this, 52, 0);
		Nose.addBox(-1F, -2.5F, -4F, 2, 4, 1);
		Nose.setRotationPoint(0F, 13.5F, -7F);
		Nose.setTextureSize(64, 64);
		Nose.mirror = true;
		this.setRotation(Nose, 0F, 0F, 0F);
		faceL2 = new ModelRenderer(this, 45, 14);
		faceL2.addBox(0.5F, -3F, -3F, 3, 4, 1);
		faceL2.setRotationPoint(0F, 13.5F, -7F);
		faceL2.setTextureSize(64, 64);
		faceL2.mirror = true;
		this.setRotation(faceL2, 0F, -0.5235988F, 0F);
		NoseUpper = new ModelRenderer(this, 54, 20);
		NoseUpper.addBox(-1F, -0.8F, -4.1F, 2, 3, 1);
		NoseUpper.setRotationPoint(0F, 13.5F, -7F);
		NoseUpper.setTextureSize(64, 64);
		NoseUpper.mirror = true;
		this.setRotation(NoseUpper, -1.047198F, 0F, 0F);
		NoseBack = new ModelRenderer(this, 45, 20);
		NoseBack.addBox(-1.5F, -0.8F, -4F, 3, 2, 1);
		NoseBack.setRotationPoint(0F, 13.5F, -7F);
		NoseBack.setTextureSize(64, 64);
		NoseBack.mirror = true;
		this.setRotation(NoseBack, -1.047198F, 0F, 0F);
		chin2 = new ModelRenderer(this, 26, 37);
		chin2.addBox(-1.5F, 0.4F, -3F, 3, 1, 1);
		chin2.setRotationPoint(0F, 13.5F, -7F);
		chin2.setTextureSize(64, 64);
		chin2.mirror = true;
		this.setRotation(chin2, 0F, 0F, 0F);
		chin = new ModelRenderer(this, 45, 25);
		chin.addBox(-2.5F, 0.4F, -2F, 5, 1, 1);
		chin.setRotationPoint(0F, 13.5F, -7F);
		chin.setTextureSize(64, 64);
		chin.mirror = true;
		this.setRotation(chin, 0F, 0F, 0F);
		Leg2 = new ModelRenderer(this, 9, 44);
		Leg2.addBox(-1F, 0F, -1F, 2, 8, 2);
		Leg2.setRotationPoint(2.5F, 16F, 7F);
		Leg2.setTextureSize(64, 64);
		Leg2.mirror = true;
		this.setRotation(Leg2, 0F, 0F, 0F);
		Leg1 = new ModelRenderer(this, 0, 44);
		Leg1.addBox(-1F, 0F, -1F, 2, 8, 2);
		Leg1.setRotationPoint(-2.5F, 16F, 7F);
		Leg1.setTextureSize(64, 64);
		Leg1.mirror = true;
		this.setRotation(Leg1, 0F, 0F, 0F);
		trf = new ModelRenderer(this, 54, 12);
		trf.addBox(-7F, -4F, 0F, 1, 6, 1);
		trf.setRotationPoint(0F, 13.5F, -7F);
		trf.setTextureSize(64, 64);
		trf.mirror = true;
		this.setRotation(trf, 0F, 0F, 0F);

		headParts.add(new ModelPartEntry(Forehead));
		headParts.add(new ModelPartEntry(faceL1));
		headParts.add(new ModelPartEntry(faceL2));
		headParts.add(new ModelPartEntry(faceR1));
		headParts.add(new ModelPartEntry(faceR2));
		headParts.add(new ModelPartEntry(Nose));
		headParts.add(new ModelPartEntry(Forehead));
		headParts.add(new ModelPartEntry(crestC));
		headParts.add(new ModelPartEntry(crestL1));
		headParts.add(new ModelPartEntry(crestL2));
		headParts.add(new ModelPartEntry(crestR1));
		headParts.add(new ModelPartEntry(crestR2));
		headParts.add(new ModelPartEntry(NoseUpper));
		headParts.add(new ModelPartEntry(headBack));
		headParts.add(new ModelPartEntry(headCenter));
		headParts.add(new ModelPartEntry(NoseBack));
		headParts.add(new ModelPartEntry(chin));
		headParts.add(new ModelPartEntry(chin2));
		headParts.add(new ModelPartEntry(tl1));
		headParts.add(new ModelPartEntry(tl2));
		headParts.add(new ModelPartEntry(tlf));
		headParts.add(new ModelPartEntry(tr1));
		headParts.add(new ModelPartEntry(tr2));
		headParts.add(new ModelPartEntry(trf));

		legParts.add(new ModelPartEntry(Leg1));
		legParts.add(new ModelPartEntry(Leg2));
		legParts.add(new ModelPartEntry(Leg3));
		legParts.add(new ModelPartEntry(Leg4));
		legParts.add(new ModelPartEntry(Leg1b));
		legParts.add(new ModelPartEntry(Leg2b));
	}

	@Override
	public void render(Entity e, float f, float f1, float f2, float f3, float f4, float f5)
	{
		super.render(e, f, f1, f2, f3, f4, f5);
		this.setRotationAngles(f, f1, f2, f3, f4, f5, e);

		GL11.glPushMatrix();
		GL11.glRotated(headRotation, 0, 1, 0);
		faceL1.render(f5);
		crestR2.render(f5);
		faceR2.render(f5);
		headBack.render(f5);
		neck.render(f5);
		crestC.render(f5);
		tlf.render(f5);
		crestL1.render(f5);
		crestR1.render(f5);
		headCenter.render(f5);
		crestL2.render(f5);
		tl1.render(f5);
		tl2.render(f5);
		tr1.render(f5);
		tr2.render(f5);
		Forehead.render(f5);
		faceR1.render(f5);
		Nose.render(f5);
		faceL2.render(f5);
		NoseUpper.render(f5);
		NoseBack.render(f5);
		chin2.render(f5);
		chin.render(f5);
		trf.render(f5);
		GL11.glPopMatrix();

		Body.render(f5);
		Mane.render(f5);

		Leg3.render(f5);
		Leg4.render(f5);
		Leg2.render(f5);
		Leg1.render(f5);

		Leg1b.render(f5);
		Leg2b.render(f5);
	}

	private void setRotation(ModelRenderer model, float x, float y, float z)
	{
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	@Override
	public final void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity e) {
		super.setRotationAngles(f, f1, f2, f3, f4, f5, e);

		for (ModelPartEntry head : headParts) {
			//head.model.rotateAngleX = (float)Math.toRadians(head.originalX) + f4 / (180F / (float)Math.PI);
			//head.model.rotateAngleY = (float)Math.toRadians(head.originalY) + f3 / (180F / (float)Math.PI);
		}
		headRotation = f3;

		Body.rotateAngleX = ((float)Math.PI / 2F);
		Mane.rotateAngleX = ((float)Math.PI / 2F);

		Leg1.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
		Leg2.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 1.4F * f1;

		Leg1b.rotateAngleX = (float)((Leg1.rotateAngleX*0.3)+Math.toRadians(30));
		Leg2b.rotateAngleX = (float)((Leg2.rotateAngleX*0.3)+Math.toRadians(30));

		Leg3.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 1.4F * f1;
		Leg4.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
	}

	@Override
	public final void setLivingAnimations(EntityLivingBase e, float a, float b, float c) {
		super.setLivingAnimations(e, a, b, c);
	}

	protected static class ModelPartEntry {

		protected final ModelRenderer model;

		protected final float originalX;
		protected final float originalY;
		protected final float originalZ;

		private ModelPartEntry(ModelRenderer m) {
			model = m;

			originalX = m.rotateAngleX;
			originalY = m.rotateAngleY;
			originalZ = m.rotateAngleZ;
		}

	}

}
